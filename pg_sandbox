#!/bin/bash

#######################################
# Output arguments to STDERR.
#######################################
print_error() {
  echo "Error: $*" >&2
}

#######################################
# If $PG_SBOX_DIR is a relative path, change it to an absolute path.
#######################################
check_absolute_path() {
  # If relative path is "./" or "."
  if [[ ${PG_SBOX_DIR} == "./" ]] || [[ ${PG_SBOX_DIR} == "." ]]; then
    PG_SBOX_DIR=`pwd`
  # Else if relative path is "./path/to/dir" 
  elif [[ ${PG_SBOX_DIR} =~ ^./(.*) ]]; then
    PG_SBOX_DIR=`pwd`"/""${BASH_REMATCH[1]}"
  fi
}

#######################################
# Check if the minimum variables needed are defined, or exit with error.
#######################################
check_variables_defined() {
  # At least PG_SBOX_BIN and PG_SBOX_DIR should be defined
  [[ -z ${PG_SBOX_BIN} ]] || [[ -z ${PG_SBOX_DIR} ]] && {
    print_error "At least PG_SBOX_BIN (-b|--bin) and PG_SBOX_DIR (-s|--sandbox-dir) should be defined"
    print_error "For usage see $(basename "$0") --help"
    exit 1
  }

  check_absolute_path
}

#######################################
# Read default values for variables from an environment file.
#   - If there is an environment file present in the current working directory, use it first.
#   - If there is an environment file defined by $PG_SBOX_ENV_FILE, use it to override those values.
#       $PG_SBOX_ENV_FILE is defined as ${PG_SBOX_DIR}/pg_sandbox.env by default.
#######################################
read_variables_from_env_file() {
  [[ -f ./pg_sandbox.env ]] && source ./pg_sandbox.env
  [[ -f ${PG_SBOX_ENV_FILE} ]] && source ${PG_SBOX_ENV_FILE}

  check_absolute_path
}

#######################################
# Write values for variables to an environment file.
#   $PG_SBOX_ENV_FILE is defined as ${PG_SBOX_DIR}/pg_sandbox.env by default.
# There is one caveat when relative paths are used, since this file will be written to in the
# $PG_SBOX_ENV_FILE top level directory, which is $PG_SBOX_DIR, and the relative path may not
# apply anymore once these variables are read. To workaround this, we transform them to absolute
# paths instead.
#######################################
set_environment_file() {
  if [ -f "${PG_SBOX_ENV_FILE}" ]; then
    print_error "There is already a pg_sandbox.env file in ""${PG_SBOX_DIR}"
    print_error "To avoid potentially overriding a previous sandbox environment, we will now exit."
    exit 1
  fi
  mkdir -p "${PG_SBOX_DIR}"
  echo PG_SBOX_BIN="${PG_SBOX_BIN}" >> $PG_SBOX_ENV_FILE
  echo PG_SBOX_DBNAME="${PG_SBOX_DBNAME}" >> $PG_SBOX_ENV_FILE
  echo PG_SBOX_DIR="${PG_SBOX_DIR}" >> $PG_SBOX_ENV_FILE
  echo PG_SBOX_DATADIR="${PG_SBOX_DATADIR}" >> $PG_SBOX_ENV_FILE
  echo PG_SBOX_LOG="${PG_SBOX_LOG}" >> $PG_SBOX_ENV_FILE
  echo PG_SBOX_HOST="${PG_SBOX_HOST}" >> $PG_SBOX_ENV_FILE
  echo PG_SBOX_PORT="${PG_SBOX_PORT}" >> $PG_SBOX_ENV_FILE
  echo PG_SBOX_USER="${PG_SBOX_USER}" >> $PG_SBOX_ENV_FILE
}

#######################################
# Print help message.
#######################################
print_help() {
  cat <<EOHELP
Usage:
    $(basename "$0") [OPTIONS] COMMAND [OTHER_OPTIONS]

Commands:
    create             initialize the PostgreSQL instance, and start it
    destroy            stop the PostgreSQL instance, and delete all directories
    init               initialize the PostgreSQL instance (it does not start it)
    run                runs the specified binary (as first argument after "run") with the other specified arguments
    restart            restart the PostgreSQL instance
    setenv             write variables to the environment variables file
    start              start the PostgreSQL instance
    stop               stop the PostgreSQL instance
    use                run the psql client. All arguments after "use" are sent directly to psql

Options:
    -a, --add-dsn      Add DSN (host, port and user) to the binary used with the "run" command
    -b, --bin          PostgreSQL binary directory to use with the sandbox environment
    -d, --dbname       database name (default: postgres)
    -D, --datadir      data directory to use within the sandbox directory (default: \${PG_SBOX_DIR}/data)
    -f, --force        don't ask when removing the sandbox directory
    -?, --help         print this message and exit
    -h, --host         hostname or IP address to use with commands (default: 127.0.0.1)
    -l, --log          PostgreSQL server log file (default: )
    -p, --port         port to use with commands (default: 5432)
    -s, --sandbox-dir  directory used as base for the needed files (including PostgreSQL data directory)
    -U, --user         user name to use with commands (default: postgres)

Example #1:
    $(basename "$0") -b /opt/postgresql/13/bin -s ./pg_13/ create
    $(basename "$0") -b /opt/postgresql/13/bin -s ./pg_13/ use
    $(basename "$0") -b /opt/postgresql/13/bin -s ./pg_13/ use -e "SELECT * FROM test.t1 LIMIT 10"
    $(basename "$0") -b /opt/postgresql/13/bin -s ./pg_13/ destroy

Example #2:
    $(basename "$0") -b /opt/postgresql/13/bin -s ./pg_13/ setenv
    cd ./pg_13/
    $(basename "$0") create
    $(basename "$0") -a run createdb test
    $(basename "$0") use -d test
    $(basename "$0") stop

EOHELP
}

#######################################
# Main function to run commands after being parsed.
#######################################
run_commands() {
  # Check if the minimum needed amount variables are set
  check_variables_defined

  # Command execution
  if [[ "${PG_SBOX_COMMAND}" == "start" ]]; then
    echo "Starting server..."
    ${PG_SBOX_BIN}/pg_ctl start -D ${PG_SBOX_DATADIR} -o "-p ${PG_SBOX_PORT}" -l ${PG_SBOX_LOG}
  fi

  if [[ "${PG_SBOX_COMMAND}" == "stop" ]]; then
    echo "Stopping server..."
    ${PG_SBOX_BIN}/pg_ctl stop -D ${PG_SBOX_DATADIR} -mf
  fi

  if [[ "${PG_SBOX_COMMAND}" == "restart" ]]; then
    echo "Restarting server..."
    ${PG_SBOX_BIN}/pg_ctl restart -D ${PG_SBOX_DATADIR} -mf
  fi

  if [[ "${PG_SBOX_COMMAND}" == "use" ]]; then
    ${PG_SBOX_BIN}/psql -h ${PG_SBOX_HOST} -p ${PG_SBOX_PORT} -U ${PG_SBOX_USER} -d ${PG_SBOX_DBNAME} "$@"
  fi

  if [[ "${PG_SBOX_COMMAND}" == "init" ]] || [[ "${PG_SBOX_COMMAND}" == "create" ]]; then
    echo "Creating directory..."
    mkdir -p ${PG_SBOX_DATADIR}
    echo "Initializing server..."
    ${PG_SBOX_BIN}/initdb -D ${PG_SBOX_DATADIR} -U ${PG_SBOX_USER}
  fi

  if [[ "${PG_SBOX_COMMAND}" == "create" ]]; then
    echo "Starting server..."
    ${PG_SBOX_BIN}/pg_ctl start -D ${PG_SBOX_DATADIR} -o "-p ${PG_SBOX_PORT}" -l ${PG_SBOX_LOG}
  fi

  if [[ "${PG_SBOX_COMMAND}" == "destroy" ]]; then
    echo "Stopping server..."
    ${PG_SBOX_BIN}/pg_ctl stop -D ${PG_SBOX_DATADIR} -mi
    echo -n "Do you want to remove ${PG_SBOX_DIR}? [y/N] "
    read do_remove
    if [[ "${do_remove}" == "y" ]] || [[ "${do_remove}" == "Y" ]]; then
      echo "Deleting sandbox directory..."
      rm -rf ${PG_SBOX_DIR}
    else
      echo "Skipping sandbox directory removal."
    fi
  fi

  if [[ "${PG_SBOX_COMMAND}" == "setenv" ]]; then
    # This will create a file that has all the environment variables needed
    # for pg_sandbox to work without having to manually set them
    set_environment_file
  fi

  if [[ "${PG_SBOX_COMMAND}" == "run" ]]; then
    # This will run the first argument as binary (under the defined PG_SBOX_BIN directory)
    # It will pass all other arguments as arguments for that binary
    PG_SBOX_EXEC="${1}"
    shift 1
    if [[ "${PG_SBOX_ADD_DSN}" -eq 1 ]]; then
      "${PG_SBOX_BIN}"/"${PG_SBOX_EXEC}" -h "${PG_SBOX_HOST}" -p "${PG_SBOX_PORT}" -U "${PG_SBOX_USER}" $@
    else
      "${PG_SBOX_BIN}"/"${PG_SBOX_EXEC}" $@
    fi
  fi
}

# Some needed defaults, that can be overridden
PG_SBOX_DATADIR='data'
PG_SBOX_DBNAME='postgres'
PG_SBOX_HOST='127.0.0.1'
PG_SBOX_PORT=5432
PG_SBOX_USER='postgres'

# Use variable values from env file, if present
read_variables_from_env_file

# Parse arguments and commands (this may override some values defined in env files!)
while (( "$#" )); do
  case "$1" in
    -a|--add-dsn)
      PG_SBOX_ADD_DSN=1
      shift 1
      ;;

    -b|--bin)
      PG_SBOX_BIN=$2
      shift 2
      ;;

    -d|--dbname)
      PG_SBOX_DBNAME=$2
      shift 2
      ;;

    -D|--datadir)
      PG_SBOX_DATADIR=${PG_SBOX_DIR}/$2
      shift 2
      ;;

    -h|--host)
      PG_SBOX_HOST=$2
      shift 2
      ;;

    -l|--log)
      #TODO: check bug with paths
      #      this will happen with all, so we'll need to make it using variables for all
      #      and make it so it is immutable, no matter the order in which they are used
      PG_SBOX_LOG=$2
      shift 2
      ;;

    -p|--port)
      PG_SBOX_PORT=$2
      shift 2
      ;;

    -s|--sandbox-dir)
      PG_SBOX_DIR=$2
      check_absolute_path
      PG_SBOX_ENV_FILE=${PG_SBOX_DIR}/pg_sandbox.env
      PG_SBOX_DATADIR=${PG_SBOX_DIR}/${PG_SBOX_DATADIR}/
      PG_SBOX_LOG=${PG_SBOX_DATADIR}/server.log
      shift 2
      ;;

    -U|--user)
      PG_SBOX_USER=$2
      shift 2
      ;;

# Equal signs are not supported, instead use space to separate argument and value
    *=*)
      print_error "Equal sign is not supported in argument: $1"
      print_error "Separate arguments and values using a space instead."
      exit 1
      ;;

# Print help output
    -\?|--help)
      print_help
      shift 1
      exit 0
      ;;

# Parse commands
    start | stop | restart | run | use | init | create | destroy | setenv)
      PG_SBOX_COMMAND=$1
      shift 1
      break
      ;;

# All other arguments are not valid
    *)
      print_error "Invalid argument: $1"
      exit 1
      ;;

  esac
done

# Call main function to run commands
run_commands "$@"

exit 0
