#!/usr/bin/python3

import sys
import getopt
import os
import json
import stat
import shutil
import urllib.request
import socket

import pg_sandbox_errors as pgserr
import pg_sandbox_help as pgshlp

from subprocess import PIPE, run

# Global variables
global pgs_bin, pgs_dbname, pgs_datadir, pgs_force, pgs_log, pgs_host, pgs_port, pgs_sandbox_dir, pgs_user

# Constants
PGS_ROOT_DIR = "~/postgresql-sandboxes/"
PGS_BIN_DIR = "/opt/postgresql/"
PGS_ENV_FILE = "pg_sandbox.env"
PGS_PG_GATHER_DIR = "~/src/support-snippets/postgresql/pg_gather/"
PGS_BUILD_DIR = "/tmp/postgresql-sandbox-build/"

# Functions
def set_defaults():
    globals()["pgs_no_dsn"] = 0
    globals()["pgs_dbname"] = "postgres"
    globals()["pgs_datadir"] = "data"
    globals()["pgs_log"] = "server.log"
    globals()["pgs_host"] = "127.0.0.1"
    globals()["pgs_port"] = "65432"
    globals()["pgs_user"] = "postgres"
    globals()["pgs_help"] = 0
    globals()["pgs_force"] = 0


def read_env():
    if os.path.isfile(PGS_ENV_FILE):
        with open(PGS_ENV_FILE) as file:
            data = json.load(file)
            globals()["pgs_bin"] = data["PGS_BIN"]
            globals()["pgs_dbname"] = data["PGS_DBNAME"]
            globals()["pgs_datadir"] = data["PGS_DATADIR"]
            globals()["pgs_log"] = data["PGS_LOG"]
            globals()["pgs_host"] = data["PGS_HOST"]
            globals()["pgs_port"] = data["PGS_PORT"]
            globals()["pgs_sandbox_dir"] = data["PGS_SANDBOX_DIR"]
            globals()["pgs_user"] = data["PGS_USER"]
            file.close()


def write_env(dest_file):
    data = {
        "PGS_BIN": globals()["pgs_bin"],
        "PGS_DBNAME": globals()["pgs_dbname"],
        "PGS_DATADIR": globals()["pgs_datadir"],
        "PGS_LOG": globals()["pgs_log"],
        "PGS_HOST": globals()["pgs_host"],
        "PGS_PORT": globals()["pgs_port"],
        "PGS_SANDBOX_DIR": globals()["pgs_sandbox_dir"],
        "PGS_USER": globals()["pgs_user"]
    }

    try:
        with open(dest_file, "w") as file:
            json.dump(data, file, indent=0)
    except Exception as e:
        pgserr.print_and_exit(pgserr.ERR_GENERIC_ERROR, e.message)


def check_compulsory_global_vars(vars):
    for var in vars:
        try: 
            globals()[var]
        except KeyError:
            pgserr.print_error_and_exit(pgserr.ERR_VAR_NOT_DEFINED, var+" not defined. Please check usage with the 'help' command.")


def get_binary_path(bin_name, root_path):
    # Searches root_path for a file named bin_name and returns root_path/.../bin_name
    bin_path = ""
    for root, dirs, files in os.walk(root_path):
        for file in files:
            if file == bin_name:
                bin_path = os.path.join(root, file)
                return bin_path
    if bin_path == "":
        pgserr.print_error(bin_name+" binary not found in '"+root_path+"' directory.")
        return pgserr.ERR_GENERIC_ERROR

def get_latest_binary_from_default_path(bin_name, root_path):
    # Searches root_path for a file named bin_name in the directory with greatest version possible
    bin_path = ""
    sorted_files = os.listdir(root_path)
    sorted_files.sort(reverse=True)
    for file in sorted_files:
        if os.path.isdir(os.path.join(root_path,file)):
            for root_j, dirs_j, files_j in os.walk(os.path.join(root_path,file)):
                for file_j in files_j:
                    if file_j == bin_name:
                        bin_path = os.path.join(root_path,file)
                        return bin_path

    if bin_path == "":
        pgserr.print_error(bin_name+" binary not found in '"+root_path+"' directory. Use -b to point to a valid PostgreSQL binary directory.")
        return pgserr.ERR_GENERIC_ERROR


# Returns an array with all the positional arguments (unprocessed).
def parse_opts():
    try:
        short_opts = "b:d:D:fh:l:np:s:U:?"
        long_opts = ["bin=","dbname=","datadir=","force","host=","log=","no-dsn","port=","sandbox-dir=","user=","help"]

        opts, args = getopt.getopt(sys.argv[2:], short_opts, long_opts)

        pgserr.print_debug("Options: ", opts)
        pgserr.print_debug("Positional arguments: ", args)
    except getopt.GetoptError as error_msg:
        pgserr.print_error_and_exit(pgserr.ERR_INCORRECT_PARAMS, error_msg)
    
    # TODO: (high prio) validate all args!
    # TODO: (low low prio) strip paths from unneeded . and ..
    for opt, arg in opts:
        if opt in ['-b','--bin']:
            globals()["pgs_bin"] = arg
        elif opt in ['-d','--dbname']:
            globals()["pgs_dbname"] = arg
        elif opt in ['-D','--datadir']:
            globals()["pgs_datadir"] = arg
        elif opt in ['-f','--force']:
            globals()["pgs_force"] = 1
        elif opt in ['-l','--log']:
            globals()["pgs_log"] = arg
        elif opt in ['-h','--host']:
            globals()["pgs_host"] = arg
        elif opt in ['-n','--no-dsn']:
            globals()["pgs_no_dsn"] = 1
        elif opt in ['-p','--port']:
            globals()["pgs_port"] = arg
        elif opt in ['-s','--sandbox-dir']:
            globals()["pgs_sandbox_dir"] = arg
        elif opt in ['-U','--user']:
            globals()["pgs_user"] = arg
        elif opt in ['-?','--help']:
            globals()["pgs_help"] = 1
    
    return args


def create_handy_scripts():
    user_group_rwx=stat.S_IRWXU|stat.S_IRWXG
    try:
        with open("restart", "w") as file:
            file.writelines(["#!/bin/bash\n", sys.argv[0]+" restart\n"])
            os.chmod("restart",user_group_rwx)
        with open("run", "w") as file:
            file.writelines(["#!/bin/bash\n", sys.argv[0]+" run $@\n"])
            os.chmod("run",user_group_rwx)
        with open("start", "w") as file:
            file.writelines(["#!/bin/bash\n", sys.argv[0]+" start\n"])
            os.chmod("start",user_group_rwx)
        with open("status", "w") as file:
            file.writelines(["#!/bin/bash\n", sys.argv[0]+" status\n"])
            os.chmod("status",user_group_rwx)
        with open("stop", "w") as file:
            file.writelines(["#!/bin/bash\n", sys.argv[0]+" stop\n"])
            os.chmod("stop",user_group_rwx)
        with open("use", "w") as file:
            file.writelines(["#!/bin/bash\n", sys.argv[0]+" use $@\n"])
            os.chmod("use",user_group_rwx)
    except Exception as e:
        pgserr.print_error(pgserr.ERR_GENERIC_ERROR, e.message)
    
    return 0


def exec_build(version):
    # 0- Check if temporary directories have been created
    src_dir = os.path.join(PGS_BUILD_DIR, "src")

    if os.path.isdir(PGS_BUILD_DIR) == False:
        os.makedirs(PGS_BUILD_DIR)
    if os.path.isdir(src_dir) == False:
        os.makedirs(src_dir)
    
    # 1- Get source code
    os.chdir(src_dir)
    url = "https://ftp.postgresql.org/pub/source/v"+version+"/postgresql-"+version+".tar.gz"
    print("Downloading source code from: "+url)
    try:
        curl_out_file = "postgresql-"+version+".tar.gz"
        curl_command = ["curl", "-o", curl_out_file, "-L", url]
        run(curl_command, universal_newlines=True)
        #(pg_src_path, headers) = urllib.request.urlretrieve(url, "postgresql-src.tar.gz")
    except Exception as e:
        pgserr.print_error(pgserr.ERR_GENERIC_ERROR, e)
        #TODO return err_code
    
    # 2- Untar source code
    try:
        untar_command = ["tar", "xzf", curl_out_file]
        run(untar_command, universal_newlines=True)
    except Exception as e:
        pgserr.print_error(pgserr.ERR_GENERIC_ERROR, e)
        #TODO return err_code

    # 3- Run configure
    os.chdir("postgresql-"+version)
    print("Running configure script.")
    try:
        configure_prefix = os.path.join(PGS_BIN_DIR,version)
        configure_command = ["./configure", "--prefix="+configure_prefix]
        pgserr.print_debug("configure command: ",configure_command)
        configure_result = run(configure_command, stdout=PIPE, stderr=PIPE, universal_newlines=True)
        if configure_result.returncode == 0:
            print(" ./configure command successful.")
        else:
            print(configure_result.stderr)
            #TODO handle gracefully, delete files, etc
            return -1
    except Exception as e:
        pgserr.print_error(pgserr.ERR_GENERIC_ERROR, e)
        #TODO return err_code + handle gracefully
    
    # 4- Compile postgres source
    print("Running make command.")
    try:
        make_command = ["make", "-j8"]
        make_result = run(make_command, stdout=PIPE, stderr=PIPE, universal_newlines=True)
        if make_result.returncode == 0:
            print(" make command successful.")
        else:
            print(make_result.stderr)
            #TODO handle gracefully, delete files, etc
            return -1
    except Exception as e:
        pgserr.print_error(pgserr.ERR_GENERIC_ERROR, e)
        #TODO return err_code + handle gracefully

    # 5- Install postgres source
    print("Running make install command.")
    try:
        make_install_command = ["make", "install"]
        make_install_result = run(make_install_command, stdout=PIPE, stderr=PIPE, universal_newlines=True)
        if make_install_result.returncode == 0:
            print(" make install command successful.")
        else:
            print(make_install_result.stderr)
            #TODO handle gracefully, delete files, etc
            return -1
    except Exception as e:
        pgserr.print_error(pgserr.ERR_GENERIC_ERROR, e)
        #TODO return err_code + handle gracefully

    # 6- Compile contrib, if it exists
    if os.path.isdir("contrib"):
        os.chdir("contrib")
        print("Running make command for contrib packages")
        try:
            make_contrib_command = ["make", "-j8"]
            make_contrib_result = run(make_contrib_command, stdout=PIPE, stderr=PIPE, universal_newlines=True)
            if make_contrib_result.returncode == 0:
                print(" make contrib command successful.")
            else:
                print(make_contrib_result.stderr)
                #TODO handle gracefully, delete files, etc
                return -1
        except Exception as e:
            pgserr.print_error(pgserr.ERR_GENERIC_ERROR, e)
            #TODO return err_code + handle gracefully

    # 7- Install contrib
    print("Running make install command for contrib packages")
    try:
        make_install_contrib_command = ["make", "install"]
        make_install_contrib_result = run(make_install_contrib_command, stdout=PIPE, stderr=PIPE, universal_newlines=True)
        if make_install_contrib_result.returncode == 0:
            print(" make install contrib command successful.")
        else:
            print(make_install_contrib_result.stderr)
            #TODO handle gracefully, delete files, etc
            return -1
    except Exception as e:
        pgserr.print_error(pgserr.ERR_GENERIC_ERROR, e)
        #TODO return err_code + handle gracefully

    print("Binaries installed in "+PGS_BIN_DIR)

    # 8- Remove src directory
    os.chdir(os.path.join(src_dir,".."))
    shutil.rmtree(src_dir)

    # TODO have stdout/stderr printed to files for each subprocess, in case troubleshooting is needed
    return 0


def exec_deploy():
    # 0- Check for compulsory variables defined
    check_compulsory_global_vars(["pgs_bin", "pgs_sandbox_dir", "pgs_datadir", "pgs_user", "pgs_log", "pgs_port"])

    # check if port is not already in use.
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            pgs_port = globals()["pgs_port"]
            if sock.connect_ex(('localhost', int(pgs_port))) == 0:
                pgserr.print_error_and_exit(pgserr.ERR_PORT_IN_USE, pgserr.ERR_PORT_IN_USE_MESSAGE)
    except Exception as e:
        print(e)
        pgserr.print_error_and_exit(pgserr.ERR_PORT_IN_USE, pgserr.ERR_PORT_IN_USE_MESSAGE)

    # 1- Create directory or error out if it exists
    if os.path.exists(globals()["pgs_sandbox_dir"]):
        pgserr.print_error_and_exit(pgserr.ERR_SBOXDIR_EXISTS, pgserr.ERR_SBOXDIR_EXISTS_MESSAGE)

    os.makedirs(globals()["pgs_sandbox_dir"])
    os.chdir(globals()["pgs_sandbox_dir"])

    # 2- create pg_sandbox.env file with vars
    write_env(PGS_ENV_FILE)

    # 3- init postgres
    initdb_bin_path = get_binary_path("initdb", globals()["pgs_bin"])
    pgserr.print_debug("initdb bin path: ", initdb_bin_path)

    #${PG_SBOX_BIN}/initdb -D ${PG_SBOX_DATADIR} -U ${PG_SBOX_USER}
    initdb_command = [initdb_bin_path, 
                      "-D", globals()["pgs_datadir"], 
                      "-U", globals()["pgs_user"]]
    pgserr.print_debug("initdb command: ", initdb_command)

    initdb_result = run(initdb_command, stdout=PIPE, stdin=PIPE, stderr=PIPE, universal_newlines=True)
    if initdb_result.returncode != 0:
        pgserr.print_error_and_exit(pgserr.ERR_GENERIC_ERROR, initdb_result.stderr)

    print("Database initialized in "+os.path.join(os.path.expanduser(PGS_ROOT_DIR),globals()["pgs_sandbox_dir"]))

    # 4- create handy scripts in the sandbox directory like: ./use ./start ./stop etc
    create_handy_scripts()

    # 5- start postgres if init didn't fail
    pgctl_bin_path = get_binary_path("pg_ctl",globals()["pgs_bin"])
    pgserr.print_debug("pg_ctl bin path: ",pgctl_bin_path)

    #${PG_SBOX_BIN}/pg_ctl start -D ${PG_SBOX_DATADIR} -o "-p ${PG_SBOX_PORT}" -l ${PG_SBOX_LOG}
    start_command = [pgctl_bin_path, 
                     "start", 
                     "-D", globals()["pgs_datadir"], 
                     "-l", globals()["pgs_log"], 
                     "-o", "\"-p "+globals()["pgs_port"]+"\""]
    pgserr.print_debug("start command: ", start_command)
    
    start_result = run(start_command, stdout=PIPE, stdin=PIPE, stderr=PIPE, universal_newlines=True)
    if start_result.returncode != 0:
        pgserr.print_error_and_exit(pgserr.ERR_GENERIC_ERROR, start_result.stderr)
    
    print("Database started. Listening on port "+globals()["pgs_port"])
    return 0

def exec_destroy():
    # 0- stop the sandbox
    if exec_stop() != pgserr.ERR_SBOX_ALREADY_STOPPED:
        print("Database stopped.")
    os.chdir(os.path.expanduser(PGS_ROOT_DIR))

    check_compulsory_global_vars(["pgs_sandbox_dir", "pgs_force"])
    
    # 1- check if sandbox directory exists
    if not os.path.exists(globals()["pgs_sandbox_dir"]):
        pgserr.print_error_and_exit(pgserr.ERR_SBOXDIR_NOT_EXISTS, pgserr.ERR_SBOXDIR_NOT_EXISTS_MESSAGE)

    # 2- delete the sandbox directory
    if globals()["pgs_force"]:
        shutil.rmtree(globals()["pgs_sandbox_dir"])
        print("Sandbox directory: "+os.path.abspath(globals()["pgs_sandbox_dir"]))
        print("Detected -f or --force, the sandbox directory has been removed.")
    else:
        print("Sandbox directory: "+os.path.abspath(globals()["pgs_sandbox_dir"]))
        remove_dir = input("Do you want to remove the sandbox directory and all of its contents? [y/N]: ")
        if (remove_dir == "y") or (remove_dir == "Y"):
            shutil.rmtree(globals()["pgs_sandbox_dir"])
            print("The sandbox directory has been removed.")
        else:
            print("Skipping directory removal.")
    return 0


def exec_report(argv, pg_gather_out_absolute_path):
    pg_gather_out = argv[0]
    pgserr.print_debug("out.txt file: "+pg_gather_out)
    pgserr.print_debug("out.txt file absolute path: "+pg_gather_out_absolute_path)

    # In this case, we may want to try and guess defaults for -b and -s, to simplify the command

    # 0- if -b was not specified, check PGS_BIN_DIR and use latest available.
    #    if there are no binaries there, error out.
    try:
        pgs_bin = globals()["pgs_bin"]
    except:
        print("PostgreSQL binary directory not set. Scanning default directory: "+PGS_BIN_DIR)
        pgs_bin = get_latest_binary_from_default_path("postgres", PGS_BIN_DIR)
        print("Setting binary directory to: "+pgs_bin)

    # 1- if -s was not specified, use pg_gather_temp as name, or error out if it exists
    try:
        pgs_sandbox_dir = globals()["pgs_sandbox_dir"]
    except:
        print("PostgreSQL Sandbox directory not set. Setting it to: pg_gather_temp.")
        pgs_sandbox_dir = "pg_gather_temp"

    # 2- create temporary sandbox
    globals()["pgs_bin"] = pgs_bin
    globals()["pgs_sandbox_dir"] = pgs_sandbox_dir
    deploy_result = exec_deploy()
    if deploy_result != 0:
        pgserr.print_error_and_exit(pgserr.ERR_SBOX_NOT_RUNNING, "Sandbox deploy failed.")

    # 3- import out.txt
    try:
        if os.path.isfile(os.path.expanduser(PGS_PG_GATHER_DIR+"gather_schema.sql")):
            gather_schema_path = os.path.expanduser(PGS_PG_GATHER_DIR+"gather_schema.sql")
        else:
            url = "https://raw.githubusercontent.com/percona/support-snippets/master/postgresql/pg_gather/gather_schema.sql"
            if globals()["pgs_force"]:
                print("gather_schema.sql can't be found. Detected -f or --force, downloading it from: "+url)
                (gather_schema_path, headers) = urllib.request.urlretrieve(url, "gather_schema.sql")
            else:
                download_gather_schema = input("gather_schema.sql can't be found. Would you like to download it? [y/N] ")
                if (download_gather_schema == "y") or (download_gather_schema == "Y"):
                    print("Downloading gather_schema.sql from: "+url)
                    (gather_schema_path, headers) = urllib.request.urlretrieve(url, "gather_schema.sql")
                else:
                    os.chdir(os.path.expanduser(PGS_ROOT_DIR))
                    exec_destroy()
    except:
        os.chdir(os.path.expanduser(PGS_ROOT_DIR))
        exec_destroy()
        pgserr.print_error_and_exit(pgserr.ERR_GENERIC_ERROR, "Make sure gather_schema.sql is available in "+PGS_PG_GATHER_DIR+" or that there is a working internet connection.")

    # psql -f gather_schema.sql -f out.txt
    os.chdir(os.path.expanduser(PGS_ROOT_DIR))
    exec_run(["psql","-f",gather_schema_path,"-f",pg_gather_out_absolute_path], False)

    # 4- generate report
    try:
        if os.path.isfile(os.path.expanduser(PGS_PG_GATHER_DIR+"gather_report.sql")):
            gather_report_path = os.path.expanduser(PGS_PG_GATHER_DIR+"gather_report.sql")
        else:
            url = "https://raw.githubusercontent.com/percona/support-snippets/master/postgresql/pg_gather/gather_report.sql"
            if (globals()["pgs_force"]):
                print("Downloading gather_report.sql from: "+url)
                (gather_report_path, headers) = urllib.request.urlretrieve(url, "gather_report.sql")
            else:
                download_gather_report = input("gather_report.sql can't be found. Would you like to download it? [y/N] ")
                if (download_gather_report == "y") or (download_gather_report == "Y"):
                    print("Downloading gather_report.sql from: "+url)
                    (gather_report_path, headers) = urllib.request.urlretrieve(url, "gather_report.sql")
                else:
                    os.chdir(os.path.expanduser(PGS_ROOT_DIR))
                    exec_destroy()
    except:
        os.chdir(os.path.expanduser(PGS_ROOT_DIR))
        exec_destroy()
        pgserr.print_error_and_exit(pgserr.ERR_GENERIC_ERROR, "Make sure gather_report.sql is available in "+PGS_PG_GATHER_DIR+" or that there is a working internet connection.")
    
    # pg_sandbox use -X -f ~/src/pg_gather/gather_report.sql > ../GatherReport.html
    os.chdir(os.path.expanduser(PGS_ROOT_DIR))
    (res_code, res_out) = exec_run(["psql","-X","-f",gather_report_path], True)

    res_dir = os.path.dirname(pg_gather_out_absolute_path)
    res_file = os.path.join(res_dir,"GatherReport.html")
    pgserr.print_debug("resulting file path: "+res_file)
    with open(res_file, 'w') as f:
        f.writelines(res_out)

    # 5- destroy temporary sandbox
    os.chdir(os.path.expanduser(PGS_ROOT_DIR))
    exec_destroy()
    return 0


def exec_run(argv,return_stdout=False):
    # 0- change to sandbox directory
    check_compulsory_global_vars(["pgs_sandbox_dir"])
    try:
        os.chdir(globals()["pgs_sandbox_dir"])
    except FileNotFoundError:
        pgserr.print_error_and_exit(pgserr.ERR_SBOXDIR_NOT_EXISTS, pgserr.ERR_SBOXDIR_NOT_EXISTS_MESSAGE)

    subcommand = argv[0]
    subcommand_bin_path = get_binary_path(subcommand, globals()["pgs_bin"])
    pgserr.print_debug("subcommand bin path: ", subcommand_bin_path)

    if globals()["pgs_no_dsn"] == 1:
        subcommand_command = [subcommand_bin_path]+argv[1:]
    else:
        subcommand_command = [subcommand_bin_path,
                              "-h", globals()["pgs_host"],
                              "-p", globals()["pgs_port"],
                              "-U", globals()["pgs_user"]
                              ]+argv[1:]
    pgserr.print_debug("subcommand: ", subcommand_command)

    if return_stdout:
        subcommand_result = run(subcommand_command, stdout=PIPE, universal_newlines=True)
        pgserr.print_debug("subcommand return code: ", subcommand_result.returncode)
        return (subcommand_result.returncode, subcommand_result.stdout)
    else:
        subcommand_result = run(subcommand_command, universal_newlines=True)
        pgserr.print_debug("subcommand return code: ", subcommand_result.returncode)
        return (subcommand_result.returncode, None)
    # We use interactive mode, to be as generic as possible, so there is no need to check return code
    


def exec_setenv():
    # 0- change to sandbox directory
    check_compulsory_global_vars(["pgs_sandbox_dir"])
    try:
        os.chdir(globals()["pgs_sandbox_dir"])
    except FileNotFoundError:
        pgserr.print_error_and_exit(pgserr.ERR_SBOXDIR_NOT_EXISTS, pgserr.ERR_SBOXDIR_NOT_EXISTS_MESSAGE)

    # 1- write env file
    write_env(PGS_ENV_FILE)
    print("Environment file written.")
    return 0


def exec_start():
    # 0- change to sandbox directory
    check_compulsory_global_vars(["pgs_sandbox_dir"])
    try:
        os.chdir(globals()["pgs_sandbox_dir"])
    except FileNotFoundError:
        pgserr.print_error_and_exit(pgserr.ERR_SBOXDIR_NOT_EXISTS, pgserr.ERR_SBOXDIR_NOT_EXISTS_MESSAGE)

    # 1- read env file, if any, and check for other compulsory variables defined
    read_env()
    check_compulsory_global_vars(["pgs_bin", "pgs_datadir"])

    pgctl_bin_path = get_binary_path("pg_ctl", globals()["pgs_bin"])
    pgserr.print_debug("pg_ctl bin path: ",pgctl_bin_path)

    # 2- check if postgres is not already running
    status_command = [pgctl_bin_path,
                      "status",
                      "-D", globals()["pgs_datadir"]]
    pgserr.print_debug("status command: ", status_command)

    status_result = run(status_command, stdout=PIPE, stdin=PIPE, stderr=PIPE, universal_newlines=True)
    pgserr.print_debug("status command return code: ", status_result.returncode)
    if status_result.returncode == 0:
        pgserr.print_and_exit("The database is already running.")

    # 3- start postgres
    #${PG_SBOX_BIN}/pg_ctl start -D ${PG_SBOX_DATADIR} -o "-p ${PG_SBOX_PORT}" -l ${PG_SBOX_LOG}
    start_command = [pgctl_bin_path, 
                     "start", 
                     "-D", globals()["pgs_datadir"], 
                     "-l", globals()["pgs_log"], 
                     "-o", "\"-p "+globals()["pgs_port"]+"\""]
    pgserr.print_debug("start command: ", start_command)
    
    start_result = run(start_command, stdout=PIPE, stdin=PIPE, stderr=PIPE, universal_newlines=True)
    if start_result.returncode != 0:
        pgserr.print_error_and_exit(pgserr.ERR_GENERIC_ERROR, start_result.stderr)
    
    return 0


def exec_status():
    # 0- change to sandbox directory
    check_compulsory_global_vars(["pgs_sandbox_dir"])
    try:
        os.chdir(globals()["pgs_sandbox_dir"])
    except FileNotFoundError:
        pgserr.print_error_and_exit(pgserr.ERR_SBOXDIR_NOT_EXISTS, pgserr.ERR_SBOXDIR_NOT_EXISTS_MESSAGE)

    # 1- read env file, if any, and check for other compulsory variables defined
    read_env()
    check_compulsory_global_vars(["pgs_bin", "pgs_datadir"])

    pgctl_bin_path = get_binary_path("pg_ctl", globals()["pgs_bin"])
    pgserr.print_debug("pg_ctl bin path: ",pgctl_bin_path)

    # 2- check status of sandbox
    status_command = [pgctl_bin_path,
                      "status",
                      "-D", globals()["pgs_datadir"]]
    pgserr.print_debug("status command: ", status_command)

    status_result = run(status_command, stdout=PIPE, stdin=PIPE, stderr=PIPE, universal_newlines=True)
    pgserr.print_debug("status command return code: ", status_result.returncode)
    if status_result.stderr != '':
        pgserr.print_error_and_exit(pgserr.ERR_GENERIC_ERROR, status_result.stderr)
    else:
        print(status_result.stdout)
        return 0


def exec_stop():
    # 0- change to sandbox directory
    check_compulsory_global_vars(["pgs_sandbox_dir"])
    try:
        os.chdir(globals()["pgs_sandbox_dir"])
    except FileNotFoundError:
        pgserr.print_error_and_exit(pgserr.ERR_SBOXDIR_NOT_EXISTS, pgserr.ERR_SBOXDIR_NOT_EXISTS_MESSAGE)

    # 1- read env file, if any, and check for other compulsory variables defined
    read_env()
    check_compulsory_global_vars(["pgs_bin", "pgs_datadir"])

    pgctl_bin_path = get_binary_path("pg_ctl", globals()["pgs_bin"])
    pgserr.print_debug("pg_ctl bin path: ",pgctl_bin_path)

    # 2- check if postgres is running
    status_command = [pgctl_bin_path,
                      "status",
                      "-D", globals()["pgs_datadir"]]
    pgserr.print_debug("status command: ", status_command)

    status_result = run(status_command, stdout=PIPE, stdin=PIPE, stderr=PIPE, universal_newlines=True)
    pgserr.print_debug("status command return code: ", status_result.returncode)
    if status_result.returncode == 3:
        print("The database is already stopped.")
        return(pgserr.ERR_SBOX_ALREADY_STOPPED)
    elif status_result.returncode != 0:
        pgserr.print_error_and_exit(pgserr.ERR_GENERIC_ERROR, status_result.stderr)

    # 3- stop postgres
    #${PG_SBOX_BIN}/pg_ctl stop -D ${PG_SBOX_DATADIR} -mf
    stop_command = [pgctl_bin_path,
                    "stop",
                    "-D", globals()["pgs_datadir"],
                    "-mf"]
    pgserr.print_debug("stop command: ", stop_command)

    stop_result = run(stop_command, stdout=PIPE, stdin=PIPE, stderr=PIPE, universal_newlines=True)
    pgserr.print_debug("stop command return code: ", stop_result.returncode)
    if stop_result.returncode != 0:
        pgserr.print_error_and_exit(pgserr.ERR_GENERIC_ERROR, stop_result.stderr)
    else:
        return(0)


def exec_use(argv):
    # 0- change to sandbox directory
    check_compulsory_global_vars(["pgs_sandbox_dir"])
    try:
        os.chdir(globals()["pgs_sandbox_dir"])
    except FileNotFoundError:
        pgserr.print_error_and_exit(pgserr.ERR_SBOXDIR_NOT_EXISTS, pgserr.ERR_SBOXDIR_NOT_EXISTS_MESSAGE)

    # 1- read env file, if any, and check for other compulsory variables defined
    read_env()
    check_compulsory_global_vars(["pgs_bin", "pgs_host", "pgs_port", "pgs_user", "pgs_dbname"])

    psql_bin_path = get_binary_path("psql", globals()["pgs_bin"])
    pgserr.print_debug("psql bin path: ", psql_bin_path)

    # 2- execute psql
    #${PG_SBOX_BIN}/psql -h ${PG_SBOX_HOST} -p ${PG_SBOX_PORT} -U ${PG_SBOX_USER} -d ${PG_SBOX_DBNAME} "$@"
    psql_command = [psql_bin_path,
                    "-h", globals()["pgs_host"],
                    "-p", globals()["pgs_port"],
                    "-U", globals()["pgs_user"],
                    "-d", globals()["pgs_dbname"]
                    ]+argv
    pgserr.print_debug("psql command: ", psql_command)

    psql_result = run(psql_command, universal_newlines=True)
    pgserr.print_debug("psql command return code: ", psql_result.returncode)
    # No need to check errors here, errors will be printed through stderr.


if __name__ == "__main__":
    args = sys.argv
    
    # To see debug outputs use: export PGS_DEBUG=1 before invoking pg_sandbox
    pgs_debug = os.getenv("PGS_DEBUG")

    if len(args) < 2:
        pgserr.print_error_and_exit(pgserr.ERR_INCORRECT_PARAM_COUNT,pgserr.ERR_INCORRECT_PARAM_COUNT_MESSAGE)

    # The only correct invocation is: pg_sandbox COMMAND [OPTS]
    # So the first argument should be a valid COMMAND
    pgs_command = args[1]
    pgserr.print_debug("Main command: ", pgs_command)

    command_list = ['build','deploy','destroy','help', 'report', 'restart','run','setenv','start','status','stop','use']

    if pgs_command not in command_list:
        pgserr.print_error_and_exit(pgserr.ERR_INCORRECT_COMMAND, pgserr.ERR_INCORRECT_COMMAND_MESSAGE)

    # set default values for variables
    set_defaults()
    # before we parse the command-line options, we will read the environment file, if any
    read_env()
    # parse command-line options (this overrides whatever was read from the env file)
    # we are left with positional arguments, in case the command was "run"
    positional_args = parse_opts()

    # For simplicity, we enforce using ~/postgresql-sandboxes/ as directory for all sandboxes.
    # If needed, change the PGS_ROOT_DIR constant above.
    if not os.path.exists(os.path.expanduser(PGS_ROOT_DIR)):
        print("The PostgreSQL Sandbox root directory (~/postgresql-sandboxes/) doesn't exist.")
        create_dir = input("Do you want to create it? [y/N]: ")
        if (create_dir == "y") or (create_dir == "Y"):
            os.mkdir(os.path.expanduser(PGS_ROOT_DIR))
        else:
            pgserr.print_error_and_exit(pgserr.ERR_ROOTDIR_NOT_EXISTS, pgserr.ERR_ROOTDIR_NOT_EXISTS_MESSAGE)

    # We need to do this before we change directory to the PGS_ROOT_DIR
    if pgs_command == "report":
        pg_gather_out_absolute_path = os.path.abspath(positional_args[0])

    # All execution functions assume they are called starting on PGS_ROOT_DIR    
    os.chdir(os.path.expanduser(PGS_ROOT_DIR))

    # If -? or --help were used, favor printing help outptus and exit (don't run anything else).
    # TODO: change this functionality to actually affect if help was a command (global help) or a --help for a command in particular
    if globals()["pgs_help"] == 1:
        pgs_command = "help"
    
    # Execute main command routines
    if pgs_command == "build":
        pgserr.print_debug("Executing build")
        version = positional_args[0]
        exec_build(version)
    elif pgs_command == "deploy":
        pgserr.print_debug("Executing deploy")
        exec_deploy()
    elif pgs_command == "destroy":
        pgserr.print_debug("Executing destroy")
        exec_destroy()
    elif pgs_command == "help":
        pgserr.print_debug("Executing help")
        pgshlp.print_help()
    elif pgs_command == "report":
        pgserr.print_debug("Executing report")
        exec_report(positional_args, pg_gather_out_absolute_path)
    elif pgs_command == "restart":
        pgserr.print_debug("Executing restart")
        if exec_stop() != pgserr.ERR_SBOX_ALREADY_STOPPED:
            print("Database stopped.")
        os.chdir(os.path.expanduser(PGS_ROOT_DIR))
        exec_start()
        pgserr.print_and_exit("Database restarted. Listening on port "+globals()["pgs_port"])
    elif pgs_command == "run":
        pgserr.print_debug("Executing run")
        exec_run(positional_args, False)
    elif pgs_command == "setenv":
        pgserr.print_debug("Executing setenv")
        exec_setenv()
    elif pgs_command == "start":
        pgserr.print_debug("Executing start")
        exec_start()
        pgserr.print_and_exit("Database started. Listening on port "+globals()["pgs_port"])
    elif pgs_command == "status":
        pgserr.print_debug("Executing status")
        exec_status()
    elif pgs_command == "stop":
        pgserr.print_debug("Executing stop")
        if exec_stop() != pgserr.ERR_SBOX_ALREADY_STOPPED:
            pgserr.print_and_exit("Database stopped.")
    elif pgs_command == "use":
        pgserr.print_debug("Executing use")
        exec_use(positional_args)
    
    sys.exit(0)
