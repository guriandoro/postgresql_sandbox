#!/bin/bash

read_variables_from_env_file() {
  # First check if there is an env file in the pwd
  [[ -f ./pg_sandbox.env ]] && source ./pg_sandbox.env
  # Override with env file set by the following variable, if set
  [[ -f ${PG_SBOX_ENV_FILE} ]] && source ${PG_SBOX_ENV_FILE}
}

set_environment_file() {
  mkdir -p `dirname $PG_SBOX_ENV_FILE`
  echo PG_SBOX_SANDBOX_HOME="${PG_SBOX_SANDBOX_HOME}" > $PG_SBOX_ENV_FILE
  echo PG_SBOX_BIN="${PG_SBOX_BIN}" >> $PG_SBOX_ENV_FILE
  echo PG_SBOX_DBNAME="${PG_SBOX_DBNAME}" >> $PG_SBOX_ENV_FILE
  echo PG_SBOX_DIR="${PG_SBOX_DIR}" >> $PG_SBOX_ENV_FILE
  echo PG_SBOX_DATADIR="${PG_SBOX_DATADIR}" >> $PG_SBOX_ENV_FILE
  echo PG_SBOX_LOG="${PG_SBOX_LOG}" >> $PG_SBOX_ENV_FILE
  echo PG_SBOX_HOST="${PG_SBOX_HOST}" >> $PG_SBOX_ENV_FILE
  echo PG_SBOX_PORT="${PG_SBOX_PORT}" >> $PG_SBOX_ENV_FILE
  echo PG_SBOX_USER="${PG_SBOX_USER}" >> $PG_SBOX_ENV_FILE
}

check_variables_defined() {
  # At least PG_SBOX_BIN and PG_SBOX_DIR should be defined
  [[ -z ${PG_SBOX_BIN} ]] || [[ -z ${PG_SBOX_DIR} ]] && {
    echo "[ERROR]: At least PG_SBOX_BIN and PG_SBOX_DIR should be defined."
    exit 1
  }
}

main() {
  # Parse arguments and commands
  while (( "$#" )); do
    case "$1" in
      -b|--bin)
        PG_SBOX_BIN=$2
        shift 2
        ;;

      -d|--dbname)
        PG_SBOX_DBNAME=$2
        shift 2
        ;;

      -D|--datadir)
        PG_SBOX_DATADIR=$2
        shift 2
        ;;

      -h|--host)
        PG_SBOX_HOST=$2
        shift 2
        ;;

      -l|--log)
        PG_SBOX_LOG=$2
        shift 2
        ;;

      -p|--port)
        PG_SBOX_PORT=$2
        shift 2
        ;;

      -s|--sandbox-dir)
        PG_SBOX_DIR=$2
        PG_SBOX_ENV_FILE=${PG_SBOX_DIR}/pg_sandbox.env
        PG_SBOX_DATADIR=${PG_SBOX_DIR}/data/
        PG_SBOX_LOG=${PG_SBOX_DATADIR}/server.log
        shift 2
        ;;

      -U|--user)
        PG_SBOX_USER=$2
        shift 2
        ;;

  # Equal signs are not supported, instead use space to separate argument and value
      *=*)
        echo "Error: Equal sign is not supported in argument: $1" >&2
        echo "       Separate arguments and values using a space instead." >&2
        exit 1
        ;;

  # Print help output
      -\?|--help)
        cat <<EOHELP
  Usage:
      $(basename "$0") [OPTIONS] COMMAND

  Commands:
      create             initialize the PostgreSQL instance, and start it
      destroy            stop the PostgreSQL instance, and delete all directories
      init               initialize the PostgreSQL instance (it does not start it)
      run                runs the specified binary (as first argument after "run") with the other specified arguments
      restart            restart the PostgreSQL instance
      setenv             write variables to the environment variables file
      start              start the PostgreSQL instance
      stop               stop the PostgreSQL instance
      use                run the psql client. All arguments after "use" are sent directly to psql

  Options:
      -b, --bin          PostgreSQL binary directory to use with the sandbox environment
      -d, --dbname       database name (default: postgres)
      -D, --datadir      data directory to use within the sandbox directory (default: \${PG_SBOX_DIR}/data)
      -?, --help         print this message and exit
      -h, --host         hostname or IP address to use with commands (default: 127.0.0.1)
      -l, --log          PostgreSQL server log file (default: )
      -p, --port         port to use with commands (default: 5432)
      -s, --sandbox-dir  directory used as base for the needed files (including PostgreSQL data directory)
      -U, --user         user name to use with commands (default: postgres)

  Example #1:
      $(basename "$0") -b /opt/postgresql/13/bin -s ./pg_13/ create
      $(basename "$0") -b /opt/postgresql/13/bin -s ./pg_13/ use
      $(basename "$0") -b /opt/postgresql/13/bin -s ./pg_13/ use -e "SELECT 1"
      $(basename "$0") -b /opt/postgresql/13/bin -s ./pg_13/ destroy

  Example #2:
      $(basename "$0") -b /opt/postgresql/13/bin -s ./pg_13/ setenv
      cd ./pg_13/
      $(basename "$0") create
      $(basename "$0") use
      $(basename "$0") destroy

EOHELP
        shift 1
        exit 0
        ;;

  # Parse commands
      start | stop | restart | use | init | create | destroy | setenv)
        PG_SBOX_COMMAND=$1
        shift 1
        break
        ;;

  # All other arguments are not valid
      *)
        echo "Error: Invalid argument: $1" >&2
        exit 1
        ;;

    esac
  done

  # Check if minimum amount of defined variables is set
  check_variables_defined

  # Command execution
  if [[ "${PG_SBOX_COMMAND}" == "start" ]]; then
    echo "Starting server..."
    ${PG_SBOX_BIN}/pg_ctl start -D ${PG_SBOX_DATADIR} -o "-p ${PG_SBOX_PORT}" -l ${PG_SBOX_LOG}
  fi

  if [[ "${PG_SBOX_COMMAND}" == "stop" ]]; then
    echo "Stopping server..."
    ${PG_SBOX_BIN}/pg_ctl stop -D ${PG_SBOX_DATADIR} -mf
  fi

  if [[ "${PG_SBOX_COMMAND}" == "restart" ]]; then
    echo "Restarting server..."
    ${PG_SBOX_BIN}/pg_ctl restart -D ${PG_SBOX_DATADIR} -mf
  fi

  if [[ "${PG_SBOX_COMMAND}" == "use" ]]; then
    ${PG_SBOX_BIN}/psql -h ${PG_SBOX_HOST} -p ${PG_SBOX_PORT} -U ${PG_SBOX_USER} -d ${PG_SBOX_DBNAME} "$@"
  fi

  if [[ "${PG_SBOX_COMMAND}" == "init" ]] || [[ "${PG_SBOX_COMMAND}" == "create" ]]; then
    echo "Creating directory..."
    mkdir -p ${PG_SBOX_DATADIR}
    echo "Initializing server..."
    ${PG_SBOX_BIN}/initdb -D ${PG_SBOX_DATADIR} -U ${PG_SBOX_USER}
  fi

  if [[ "${PG_SBOX_COMMAND}" == "create" ]]; then
    echo "Starting server..."
    ${PG_SBOX_BIN}/pg_ctl start -D ${PG_SBOX_DATADIR} -o "-p ${PG_SBOX_PORT}" -l ${PG_SBOX_LOG}
  fi

  if [[ "${PG_SBOX_COMMAND}" == "destroy" ]]; then
    echo "Stopping server..."
    ${PG_SBOX_BIN}/pg_ctl stop -D ${PG_SBOX_DATADIR} -mi
    echo "Deleting sandbox directory..."
    rm -rf ${PG_SBOX_DIR}
  fi

  if [[ "${PG_SBOX_COMMAND}" == "setenv" ]]; then
    # This will create a file that has all the environment variables needed
    # for pg_sandbox to work without having to manually set them
    set_environment_file
  fi
}


# Default values for variables
PG_SBOX_SANDBOX_HOME="${PG_SBOX_SANDBOX_HOME:-"${HOME}/postgresql-sandboxes/"}"
#PG_SBOX_BIN="${PG_SBOX_BIN:-/usr/pgsql-13/bin/}"
PG_SBOX_DBNAME="${PG_SBOX_DBNAME:-postgres}"
#PG_SBOX_DIR="${PG_SBOX_DIR:-"${PG_SBOX_SANDBOX_HOME}/pgsb_13/"}"
PG_SBOX_DATADIR="${PG_SBOX_DATADIR:-"${PG_SBOX_DIR}/data/"}"
PG_SBOX_LOG="${PG_SBOX_LOG:-"${PG_SBOX_DATADIR}/server.log"}"
PG_SBOX_HOST="${PG_SBOX_HOST:-127.0.0.1}"
PG_SBOX_PORT="${PG_SBOX_PORT:-5432}"
PG_SBOX_USER="${PG_SBOX_USER:-postgres}"

# Other variables
PG_SBOX_ENV_FILE=${PG_SBOX_DIR}/pg_sandbox.env

# Override default variables with variables from env file
read_variables_from_env_file

# Call main function to process arguments and run commands
main "$@"

exit 0
